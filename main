#include <stdio.h>
#include "header.h"


// Ajouter l'arête entre les sommets s1 et s2 du graphe
pSommet* CreerArc(pSommet* sommet,int s1,int s2)
{
}

// créer le graphe
Graphe* CreerGraphe(int ordre)
{
    Graphe * Newgraphe=(Graphe*)malloc(sizeof(Graphe));
    Newgraphe->pSommet = (pSommet*)malloc(ordre*sizeof(pSommet));

    for(int i=0; i<ordre; i++)
    {
        Newgraphe->pSommet[i]=(pSommet)malloc(sizeof(struct Sommet));
        Newgraphe->pSommet[i]->valeur=i;
        Newgraphe->pSommet[i]->arc=NULL;
    }
    return Newgraphe;
}


/* La construction du réseau peut se faire à partir d'un fichier dont le nom est passé en paramètre
Le fichier contient : ordre, taille,orientation (0 ou 1)et liste des arcs */
Graphe * lire_graphe(char * nomFichier)
{
    Graphe* graphe;
    FILE * ifs = fopen(nomFichier,"r");
    int taille, orientation, ordre, s1, s2;

    if (!ifs)
    {
        printf("Erreur de lecture fichier\n");
        exit(-1);



    }

    fscanf(ifs,"%d",&ordre);

    graphe=CreerGraphe(ordre); // créer le graphe d'ordre sommets

    fscanf(ifs,"%d",&taille);
    fscanf(ifs,"%d",&orientation);

    graphe->orientation=orientation;
    graphe->ordre=ordre;

    // créer les arêtes du graphe
    for (int i=0; i<taille; ++i)
    {
        fscanf(ifs,"%d%d",&s1,&s2);
        graphe->pSommet=CreerArc(graphe->pSommet, s1, s2);

        if(!orientation)
            graphe->pSommet=CreerArc(graphe->pSommet, s2, s1);
    }

    return graphe;
}

/*affichage du graphe avec les successeurs de chaque sommet */
void Graphe_afficher(Graphe* graphe)
{
    printf("graphe\n");

    if(graphe->orientation)
        printf("oriente\n");
    else
        printf("non oriente\n");

    printf("ordre = %d\n",graphe->ordre);

    printf("listes d'adjacence :\n");

    for (int i=0; i<graphe->ordre; i++)
    {
        afficher_successeurs(graphe->pSommet, i);
        printf("\n");
    }

}




int main() {
    FILE *fichier;
    char caractere;

    // Ouvrir le fichier en mode lecture
    fichier = fopen("C:\\Users\\Gabriel\\Documents\\ING2-2023-2024\\theorie des graphes\\test1\\dependance.txt", "r");

    // Vérifier si l'ouverture du fichier a réussi
    if (fichier == NULL) {
        perror("Erreur lors de l'ouverture du fichier");
        return 1;
    }


    while (fgets(caractere, sizeof(caractere), fichier) != NULL) {
        char nom;
        int duree;
        int predecesseurs;
        int dependant;

        sscanf(caractere, "%c %d", &predecesseurs, &dependant);
        // Fermer le fichier
        fclose(fichier);

        FILE *fichier2;

        fichier2 = fopen("C:\\Users\\Gabriel\\Documents\\ING2-2023-2024\\theorie des graphes\\test1\\poids.txt", "b");

        // Vérifier si l'ouverture du fichier a réussi
        if (fichier == NULL) {
            perror("Erreur lors de l'ouverture du fichier2");
            return 1;
        }


        while (fgets(caractere, sizeof(caractere), fichier2) != NULL) {
            char nom;
            int duree;
            int arc;
            float poids;

            scanf(caractere, "%c %f", &predecesseurs, &dependant);
            // Fermer le fichier
            fclose(fichier2);
            return 0;
        }


    }
}
